package Leetcode_1109_CorporateFlightBookings;

import java.util.Arrays;

/*
	这里有 n 个航班，它们分别从 1 到 n 进行编号。
	
	我们这儿有一份航班预订表，
	表中第 i 条预订记录 bookings[i] = [i, j, k] 
	意味着我们在从 i 到 j 的每个航班上预订了 k 个座位。
	
	请你返回一个长度为 n 的数组 answer，
	按航班编号顺序返回每个航班上预订的座位数。 
	
	示例：
		输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
		输出：[10,55,45,25,25]
	
	提示：
		1 <= bookings.length <= 20000
		1 <= bookings[i][0] <= bookings[i][1] <= n <= 20000
		1 <= bookings[i][2] <= 10000
 */
public class CorporateFlightBookings {
	// 1109.航班预订统计

	// 暴力解法（超时）
	public int[] corpFlightBookings(int[][] bookings, int n) {
		int[] res = new int[n];
		for (int[] booking : bookings) {
			int i = booking[0];
			int j = booking[1];
			int k = booking[2];

			for (int x = i; x <= j; x++) {
				res[x - 1] += k;
			}
		}
		return res;
	}

	// 部分和
	public int[] corpFlightBookings2(int[][] bookings, int n) {
		int[] res = new int[n + 1];

		for (int[] book : bookings) {
			res[book[0] - 1] += book[2];
			res[book[1]] -= book[2];
		}

		for (int i = 1; i < n; i++) {
			res[i] += res[i - 1];
		}
		return Arrays.copyOf(res, n);
	}
}
