package Leetcode_1093_StatisticsfromaLargeSample;

/*
	我们对 0 到 255 之间的整数进行采样，并将结果存储在数组 count 中：count[k] 就是整数 k 的采样个数。
	
	我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。
	
	我们先来回顾一下中位数的知识：
	
	如果样本中的元素有序，并且元素数量为奇数时，中位数为最中间的那个元素；
	如果样本中的元素有序，并且元素数量为偶数时，中位数为中间的两个元素的平均值。
	 
	
	示例 1：	
		输入：count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		输出：[1.00000,3.00000,2.37500,2.50000,3.00000]
		示例 2：	
		输入：count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		输出：[1.00000,4.00000,2.18182,2.00000,1.00000]
	 
	
	提示：	
		count.length == 256
		1 <= sum(count) <= 10^9
		计数表示的众数是唯一的
		答案与真实值误差在 10^-5 以内就会被视为正确答案
 */
public class StatisticsfromaLargeSample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	// 1093. 大样本统计
	public double[] sampleStats(int[] count) {
		double[] res = new double[5];
		res[0] = 256;
		double sum = 0;
		int countSample = 0;// 计数器
		int maxCount = 0;
		for (int i = 0; i < 256; i++) {
			// 最小值
			res[0] = (count[i] != 0 && res[0] == 256) ? i : res[0];
			// 最大值
			res[1] = count[i] != 0 ? i : res[1];
			// 平均值
			sum += i * count[i];
			countSample += count[i];
			// 众数
			if (count[i] > maxCount) {
				maxCount = count[i];
				res[4] = i;
			}
		}
		// 计算平均值
		res[2] = sum / countSample;
		// 计算中位数
		int midCount = countSample / 2;
		boolean flag = countSample % 2 == 0;// true 偶数
		countSample = 0;
		for (int i = (int) res[0]; i <= res[1]; i++) {
			countSample += count[i];
			// 偶数
			if (flag && countSample >= midCount) {
				if (countSample == midCount) {
					double temp = i;
					while (count[++i] == 0)
						;
					temp += i;
					res[3] = temp / 2;
					break;
				} else {
					res[3] = i;
					break;
				}
			}
			// 奇数
			if (!flag && countSample >= midCount + 1) {
				res[3] = i;
				break;
			}
		}
		return res;
	}

}
