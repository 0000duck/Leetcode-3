package Leetcode_380_InsertDeleteGetRandomO1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

/*
	设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。
	
	insert(val)：当元素 val 不存在时，向集合中插入该项。
	remove(val)：元素 val 存在时，从集合中移除该项。
	getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。
	
	示例 :	
		// 初始化一个空的集合。
		RandomizedSet randomSet = new RandomizedSet();
		
		// 向集合中插入 1 。返回 true 表示 1 被成功地插入。
		randomSet.insert(1);
		
		// 返回 false ，表示集合中不存在 2 。
		randomSet.remove(2);
		
		// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。
		randomSet.insert(2);
		
		// getRandom 应随机返回 1 或 2 。
		randomSet.getRandom();
		
		// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。
		randomSet.remove(1);
		
		// 2 已在集合中，所以返回 false 。
		randomSet.insert(2);
		
		// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。
		randomSet.getRandom();
 */

//380. 常数时间插入、删除和获取随机元素
public class RandomizedSet {
	public static void main(String[] args) {
		// ["RandomizedSet","insert","remove","insert","getRandom","remove","insert","getRandom"]
		// [[],[1],[2],[2],[],[1],[2],[]]
		// [null,true,false,true,2,true,false,2]
		RandomizedSet rs = new RandomizedSet();
		rs.insert(-1);
		rs.remove(-2);
		rs.insert(-2);
		rs.getRandom();
		rs.remove(-1);
		rs.insert(-2);
	}

	private Set<Integer> set;

	/** Initialize your data structure here. */
	public RandomizedSet() {
		set = new HashSet<Integer>();
	}

	/**
	 * Inserts a value to the set. Returns true if the set did not already contain
	 * the specified element.
	 */
	public boolean insert(int val) {
		if (!set.contains(val)) {
			return set.add(val);
		} else {
			return false;
		}

	}

	/**
	 * Removes a value from the set. Returns true if the set contained the specified
	 * element.
	 */
	public boolean remove(int val) {
		if (set.contains(val)) {
			return set.remove(val);
		} else {
			return false;
		}

	}

	/** Get a random element from the set. */
	public int getRandom() {
		Random r = new Random();
		int i = 0;
		int rand = r.nextInt(set.size());
		for (Integer x : set) {
			if (i == rand) {
				return x;
			}
			i++;
		}
		return -1;
	}
}
/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */