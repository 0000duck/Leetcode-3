#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
/*
91. 解码方法

一条包含字母 A-Z 的消息通过以下方式进行了编码：
'A' -> 1	'B' -> 2	...		'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。

示例 1:		输入: "12"		输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:		输入: "226"		输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
*/

class Solution {
public:
    int numDecodings(string s) {
        if(!s.size() || s[0]=='0')return 0;
        vector<int> dp(s.size(), 0);
        dp[0] = 1;
        for(int i=1; i<s.size(); ++i){
        	// 当前数能与前面的数一起编码
        	if(s[i-1] == '1' || (s[i-1] == '2' && s[i] < '7'))
        		dp[i] = i==1 ? 1 : dp[i-2];
        	// 当前数可以独自编码
        	if(s[i] != '0')dp[i] += dp[i-1];
        }
        return dp[s.size()-1];
    }
};

int main(){
    Solution* so = new Solution();
    int num = so->numDecodings("106010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010");
    cout<<num<<endl;
    return 0;
}